classDiagram
  class Account {
    created_by : ForeignKey
    credit_card : BooleanField
    current_balance
    current_invoice
    current_invoice_is_paid
    due_date : PositiveSmallIntegerField
    group : ForeignKey
    group : NoneType
    initial_balance : FloatField
    is_shared
    last_closed_invoice
    last_closed_invoice_is_paid
    name : CharField
    owned_by : ForeignKey
    settlement_date : PositiveSmallIntegerField
    total_transactions
    adjust_balance(target, user)
    get_credit_card_adjustments(year, month)
    get_credit_card_expenses(year, month)
    get_credit_card_payments(year, month)
    is_invoice_paid(year, month)
    remove_group()
  }
  class AccountAdmin {
    list_display : list
    list_filter : list
  }
  class AccountCreateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class AccountDeleteView {
    model
    success_message : str
    success_url : __proxy__
    delete(request)
    test_func()
  }
  class AccountDetailView {
    model
  }
  class AccountForm {
    credit_card : BooleanField
    current_balance : FloatField
    error_css_class : str
    request
    clean()
    save()
  }
  class AccountFormTests {
    factory : RequestFactory
    fixtures : list
    user
    setUp()
    test_get()
    test_post()
  }
  class AccountListView {
    model
    get_context_data()
    get_queryset()
  }
  class AccountModelTests {
    factory : RequestFactory
    fixtures : list
    user
    setUp()
    test_adjust_balance()
  }
  class AccountSerializer {
    id : PrimaryKeyRelatedField
  }
  class AccountUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
    test_func()
  }
  class AccountViewSet {
    permission_classes : list
    queryset
    serializer_class
    get_queryset()
  }
  class Budget {
    accounts : ManyToManyField
    all_accounts : BooleanField
    all_categories : BooleanField
    amount : FloatField
    amount_progress
    amount_spent
    categories : ManyToManyField
    configuration : ForeignKey
    created_by : ForeignKey
    end_date : DateField
    open
    progress_bar_color
    spent_queryset
    start_date : DateField
    status
    time_progress
    time_spent
    time_total
  }
  class BudgetAdmin {
    list_display : list
    list_filter : list
  }
  class BudgetConfiguration {
    FREQUENCY : list
    MONTHLY : str
    WEEKLY : str
    YEARLY : str
    accounts : ManyToManyField
    active : BooleanField
    all_accounts : BooleanField
    all_categories : BooleanField
    amount : FloatField
    categories : ManyToManyField
    created_by : ForeignKey
    frequency : CharField
    start_date : DateField
    verbose_interval
    create_budget()
    is_schedule_date(reference_date)
  }
  class BudgetConfigurationAdmin {
    list_display : list
    list_filter : list
  }
  class BudgetConfigurationCreateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class BudgetConfigurationDeleteView {
    model
    success_message : str
    success_url : __proxy__
    delete(request)
    test_func()
  }
  class BudgetConfigurationForm {
    error_css_class : str
    request
    save()
  }
  class BudgetConfigurationListView {
    model
    get_context_data()
    get_queryset()
  }
  class BudgetConfigurationUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
    test_func()
  }
  class BudgetCreateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class BudgetDeleteView {
    model
    success_message : str
    success_url : __proxy__
    delete(request)
    test_func()
  }
  class BudgetForm {
    error_css_class : str
    request
    clean()
    save()
  }
  class BudgetListView {
    model
    get_context_data()
    get_queryset()
  }
  class BudgetUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
    test_func()
  }
  class CardOrderView {
    template_name : str
    get_context_data()
    post(request)
  }
  class CardOrderViewTests {
    fixtures : list
    user
    setUp()
    test_context_data()
    test_context_data_with_all_cards_in_config()
    test_context_data_with_two_cards_in_config()
    test_post()
  }
  class Category {
    ADJUSTMENT : str
    ADJUSTMENT_NAME : str
    DEFAULT : str
    EXPENSE : str
    INCOME : str
    INITIAL_CATEGORIES : list
    INTERNAL_TYPES : list
    SPECIAL_CATEGORIES : list
    TRANSACTION_TYPES : list
    TRANSFER : str
    TRANSFER_NAME : str
    active : BooleanField
    created_at : DateTimeField
    created_by : ForeignKey
    description : TextField
    group : ForeignKey
    icon : ForeignKey
    internal_type : CharField
    is_deletable
    is_group_defined
    is_user_defined
    name : CharField
    type : CharField
  }
  class CategoryAdmin {
    list_display : list
    list_filter : list
  }
  class CategoryCreateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class CategoryDeleteView {
    model
    success_message : str
    success_url : __proxy__
    delete(request)
    test_func()
  }
  class CategoryForm {
    error_css_class : str
    request
    save()
  }
  class CategoryListApi {
    get(request)
  }
  class CategoryListView {
    model
    get_context_data()
    get_queryset()
  }
  class CategorySerializer {
    icon : StringRelatedField
    id : PrimaryKeyRelatedField
  }
  class CategoryUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class CategoryViewSet {
    permission_classes : list
    queryset
    serializer_class
    get_queryset()
  }
  class CategoryWidget {
    queryset : NoneType
    template_name : str
    get_context(name, value, attrs)
    render(name, value, attrs, renderer)
  }
  class Chart {
    AXIS_CHOICES : list
    CATEGORY_CHOICES : list
    FIELD_CHOICES : list
    FILTER_CHOICES : list
    METRIC_CHOICES : list
    TYPE_CHOICES : list
    axis : CharField
    category : CharField
    created_at : DateTimeField
    created_by : ForeignKey
    field : CharField
    filters : MultiSelectField
    metric : CharField
    order : PositiveSmallIntegerField
    title : CharField
    type : CharField
    updated_at : DateTimeField
    get_queryset(user) -> QuerySet
  }
  class ChartAdmin {
    list_display
    list_filter : list
    search_fields : list
  }
  class ChartDataApiView {
    permission_classes : list
    delete(request, pk)
    get(request, pk)
    patch(request, pk)
    put(request, pk)
  }
  class ChartListApiView {
    get(request)
    post(request)
  }
  class ChartMoveApiView {
    post(request)
  }
  class ChartMoveSerializer {
    chart : IntegerField
    order : IntegerField
    create(validated_data)
    move()
    update(instance, validated_data)
    validate_chart(value)
    validate_order(value)
  }
  class ChartSerializer {
    created_by : HiddenField
    filters : MultipleChoiceField
  }
  class ChartsView {
    template_name : str
    get_context_data()
  }
  class Configuration {
    ACCOUNTS : str
    CARDS : list
    CATEGORIES : str
    C_BALANCE : int
    C_BUDGETS : int
    C_OVERVIEW : int
    C_WALLET : int
    GOALS : str
    GROUPS : str
    HOME : str
    PAGES : list
    TRANSACTIONS : str
    cards : CharField
    cards_list
    decoded_cards
    main_page : CharField
    user : OneToOneField
  }
  class ConfigurationAdmin {
    list_display : list
    list_filter : list
  }
  class ContentTypeModelChoiceField {
    label_from_instance(obj)
  }
  class FakerForm {
    batch_amount : IntegerField
    model
    range_end : DateField
    range_start : DateField
    target_user : ModelChoiceField
    create_fake_instances()
  }
  class FakerView {
    form_class
    success_url : str
    template_name : str
    form_valid(form) -> HttpResponse
    test_func()
  }
  class FinanceConfig {
    name : str
    ready()
  }
  class Goal {
    CONSTANT : str
    GOAL_FREQUENCY : list
    LINEAR : str
    MONTHLY : str
    PROGRESSION_MODES : list
    WEEKLY : str
    YEARLY : str
    created_at : DateTimeField
    created_by : ForeignKey
    frequency : CharField
    group : ForeignKey
    name : CharField
    progression_mode : CharField
    start_date : DateField
    target_amount : FloatField
    target_date : DateField
  }
  class GoalCreateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class GoalDeleteView {
    model
    success_message : str
    success_url : __proxy__
    delete(request)
  }
  class GoalForm {
    error_css_class : str
    request
    save()
  }
  class GoalListView {
    model
    get_queryset()
  }
  class GoalUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class Group {
    created_by : ForeignKey
    members : ManyToManyField
    name : CharField
    owned_by
    owned_by : ForeignKey
    change_ownership_to(user)
  }
  class GroupAdmin {
    list_display : list
    list_filter : list
  }
  class GroupCreateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class GroupDeleteView {
    model
    success_message : str
    success_url : __proxy__
    delete(request)
    test_func()
  }
  class GroupForm {
    error_css_class : str
    request
    save()
  }
  class GroupListView {
    model
    get_context_data()
    get_queryset()
  }
  class GroupUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class HomePageView {
    template_name : str
    get_context_data()
  }
  class HomePageViewTests {
    fixtures : list
    user
    setUp()
    test_context_data()
    test_homepage()
  }
  class Icon {
    markup : CharField
  }
  class IconCreateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
    test_func()
  }
  class IconDeleteView {
    model
    success_message : str
    success_url : __proxy__
    delete(request)
    test_func()
  }
  class IconForm {
    error_css_class : str
    save()
  }
  class IconListView {
    model
    get_queryset()
    test_func()
  }
  class IconSerializer {
  }
  class IconUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
    test_func()
  }
  class IconViewTests {
    fixtures : list
    superuser
    setUp() -> None
    test_icon_create_view()
    test_icon_delete_view()
    test_icon_list_view()
    test_icon_update_view()
  }
  class Installment {
    FIRST : str
    HANDLE_REMAINDER : list
    LAST : str
    account : ForeignKey
    category : ForeignKey
    created_by : ForeignKey
    description : CharField
    handle_remainder : CharField
    months : IntegerField
    timestamp : DateTimeField
    total_amount : FloatField
    create_transactions()
  }
  class InstallmentAdmin {
    list_display : list
    list_filter : list
  }
  class InstallmentCreateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class InstallmentDeleteView {
    model
    success_message
    success_url : __proxy__
    delete(request)
    test_func()
  }
  class InstallmentForm {
    error_css_class : str
    request
    type : CharField
    save()
  }
  class InstallmentListView {
    model
    get_queryset()
  }
  class InstallmentSerializer {
    account
    category
    created_by : HiddenField
    create(validated_data)
    update(instance, validated_data)
  }
  class InstallmentUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class InstallmentViewSet {
    permission_classes : list
    queryset
    serializer_class
    get_queryset()
  }
  class Invite {
    accepted : BooleanField
    accepted : bool
    created_at : DateTimeField
    created_by : ForeignKey
    email : EmailField
    group : ForeignKey
    link
    accept(user)
    send(request)
  }
  class InviteAcceptanceView {
    template_name : str
    get(request)
  }
  class InviteAdmin {
    list_display : list
    list_filter : list
  }
  class InviteApi {
    post(request)
  }
  class InviteListApiView {
    get(request)
  }
  class InviteTests {
    fixtures : list
    group
    user
    setUp() -> None
    test_invite_api()
    test_invite_api_existing_group_and_email()
  }
  class Meta {
    fields : list
    model
  }
  class Meta {
    fields : list
    model
    widgets : dict
  }
  class Meta {
    fields : list
    model
    widgets : dict
  }
  class Meta {
    fields : list
    model
    widgets : dict
  }
  class Meta {
    fields : list
    model
  }
  class Meta {
    fields : list
    model
    widgets : dict
  }
  class Meta {
    fields : list
    model
  }
  class Meta {
    fields : list
    model
    widgets : dict
  }
  class Meta {
    fields : list
    model
    widgets : dict
  }
  class Meta {
    fields : list
    model
    widgets : dict
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    verbose_name : __proxy__
    verbose_name_plural : __proxy__
  }
  class Meta {
    ordering : list
  }
  class Meta {
    fields : list
    model
  }
  class Meta {
    fields : list
    model
    read_only_fields : list
  }
  class Meta {
    fields : list
    model
  }
  class Meta {
    fields : list
    model
    read_only_fields : list
  }
  class Meta {
    depth : int
    fields : list
    model
    read_only_fields : list
  }
  class Meta {
    depth : int
    fields : list
    model
    read_only_fields : list
  }
  class Meta {
    depth : int
    fields : list
    model
    read_only_fields : list
  }
  class Meta {
    depth : int
    fields : list
    model
    read_only_fields : list
  }
  class Meta {
    fields : list
    model
  }
  class Migration {
    dependencies : list
    initial : bool
    operations : list
    replaces : list
  }
  class Migration {
    dependencies : list
    operations : list
  }
  class RecurrentTransaction {
    FREQUENCY : list
    MONTHLY : str
    WEEKLY : str
    YEARLY : str
    account : ForeignKey
    active : BooleanField
    amount : FloatField
    category : ForeignKey
    created_by : ForeignKey
    description : CharField
    frequency : CharField
    timestamp : DateTimeField
    type
    verbose_interval
    create_past_transactions()
    create_transaction(reference_date)
    is_schedule_date(reference_date)
  }
  class RecurrentTransactionAdmin {
    list_display : list
    list_filter : list
  }
  class RecurrentTransactionCreateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class RecurrentTransactionDeleteView {
    model
    success_message
    success_url : __proxy__
    delete(request)
    test_func()
  }
  class RecurrentTransactionForm {
    error_css_class : str
    request
    type : CharField
    save()
  }
  class RecurrentTransactionListView {
    model
    get_context_data()
    get_queryset()
  }
  class RecurrentTransactionSerializer {
    account
    category
    created_by : HiddenField
    create(validated_data)
    update(instance, validated_data)
  }
  class RecurrentTransactionUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class RecurrentTransactionViewSet {
    permission_classes : list
    queryset
    serializer_class
    get_queryset()
  }
  class RestrictedAreaView {
    template_name : str
    get_context_data()
  }
  class StripeTests {
    fixtures : list
    products
    user
    setUp()
    test_stripe_plans()
    test_stripe_products()
  }
  class Transaction {
    account
    account : ForeignKey
    active : BooleanField
    amount
    amount : FloatField
    category
    category : ForeignKey
    created_at : DateTimeField
    created_by
    created_by : ForeignKey
    description : CharField
    description : str
    installment : ForeignKey
    recurrent : ForeignKey
    signed_amount
    timestamp : DateTimeField
    transference : ForeignKey
    type
    round_amount()
  }
  class TransactionAdmin {
    list_display : list
    list_filter : list
    search_fields : list
  }
  class TransactionCreateView {
    form_class
    success_message : str
    success_url : __proxy__
    template_name : str
    form_valid(form)
  }
  class TransactionDeleteView {
    model
    success_message
    success_url : __proxy__
    delete(request)
    test_func()
  }
  class TransactionForm {
    error_css_class : str
    request
    type : CharField
    save()
  }
  class TransactionListView {
    model
    paginate_by : int
    template_name : str
    get_context_data()
    get_queryset()
  }
  class TransactionListViewTests {
    category
    fixtures : list
    user
    setUp()
    test_account_delete_view()
    test_account_list_view()
    test_account_list_view_with_filters()
    test_account_update_view()
    test_category_delete_view()
    test_category_list_api()
    test_category_list_api_with_filter_type_only()
    test_category_list_api_with_filters()
    test_category_list_view()
    test_category_list_view_with_filter()
    test_goal_delete_view()
    test_goal_list_view()
    test_group_delete_view()
    test_group_list_view()
    test_group_list_view_with_filter()
    test_installment_delete_view()
    test_recurrent_isntallment_list_view()
    test_recurrent_transaction_delete_view()
    test_recurrent_transaction_list_view()
    test_transaction_create_view()
    test_transaction_create_view_installment()
    test_transaction_create_view_recurrent()
    test_transaction_create_view_type_TRF()
    test_transaction_delete_view()
    test_transaction_list_view()
    test_transaction_list_view_with_filters()
    test_transaction_list_view_with_page()
    test_transaction_month_archive_view()
    test_transaction_month_archive_view_with_filters()
  }
  class TransactionModelTests {
    test_signed_amount_with_expense()
    test_signed_amount_with_income()
  }
  class TransactionMonthArchiveView {
    allow_empty : bool
    allow_future : bool
    date_field : str
    queryset
    get_context_data()
    get_queryset()
  }
  class TransactionSerializer {
    account
    category
    created_by : HiddenField
    create(validated_data)
    update(instance, validated_data)
  }
  class TransactionUpdateView {
    form_class
    model
    success_message : str
    success_url : __proxy__
  }
  class TransactionViewSet {
    permission_classes : list
    queryset
    serializer_class
    get_queryset()
  }
  class Transference {
    amount : FloatField
    created_by : ForeignKey
    description : CharField
    from_account : ForeignKey
    timestamp : DateTimeField
    to_account : ForeignKey
    create_transactions()
  }
  class TransferenceAdmin {
    list_display : list
    list_filter : list
  }
  class TransferenceSerializer {
    created_by : HiddenField
    from_account
    to_account
    create(validated_data)
    validate(attrs)
  }
  class TransferenceViewSet {
    permission_classes : list
    queryset
    serializer_class
    get_queryset()
  }
  class UniversalTransactionForm {
    account : ModelChoiceField
    active : BooleanField
    amount : FloatField
    category : ModelChoiceField
    description : CharField
    error_css_class : str
    frequency : ChoiceField
    from_account : ModelChoiceField
    handle_remainder : ChoiceField
    is_recurrent_or_installment : BooleanField
    months : IntegerField
    recurrent_or_installment : CharField
    request
    timestamp : DateTimeField
    to_account : ModelChoiceField
    transaction_types
    type : CharField
    clean()
  }
  class UserCreationTests {
    account
    factory : RequestFactory
    fixtures : list
    group
    user_1
    user_2
    setUp()
    test_group_creation()
    test_patch_with_logged_in_user()
  }
  class UserModelTests {
    fixtures : list
    user
    setUp()
    test_user_created()
    test_user_has_accounts()
    test_user_has_categories()
  }
  class UserSerializer {
  }
  class UserViewSet {
    queryset
    serializer_class
  }
  class ViewsetTests {
    fixtures : list
    user
    setUp() -> None
    test_viewset()
  }
  class WidgetTests {
    choices
    setUp() -> None
    test_category_widget_get_context_method()
    test_category_widget_render_method()
  }
  AccountForm --* AccountCreateView : form_class
  AccountForm --* AccountUpdateView : form_class
  BudgetConfigurationForm --* BudgetConfigurationCreateView : form_class
  BudgetConfigurationForm --* BudgetConfigurationUpdateView : form_class
  BudgetForm --* BudgetCreateView : form_class
  BudgetForm --* BudgetUpdateView : form_class
  CategoryForm --* CategoryCreateView : form_class
  CategoryForm --* CategoryUpdateView : form_class
  FakerForm --* FakerView : form_class
  ContentTypeModelChoiceField --* FakerForm : model
  GoalForm --* GoalCreateView : form_class
  GoalForm --* GoalUpdateView : form_class
  GroupForm --* GroupCreateView : form_class
  GroupForm --* GroupUpdateView : form_class
  IconForm --* IconCreateView : form_class
  IconForm --* IconUpdateView : form_class
  InstallmentForm --* InstallmentCreateView : form_class
  InstallmentForm --* InstallmentUpdateView : form_class
  RecurrentTransactionForm --* RecurrentTransactionCreateView : form_class
  RecurrentTransactionForm --* RecurrentTransactionUpdateView : form_class
  TransactionForm --* TransactionUpdateView : form_class
  UniversalTransactionForm --* TransactionCreateView : form_class
  Account --* Meta : model
  Account --* Transaction : account
  Account --* Meta : model
  Account --* AccountCreateView : model
  Account --* AccountDeleteView : model
  Account --* AccountDetailView : model
  Account --* AccountListView : model
  Account --* AccountUpdateView : model
  Budget --* Meta : model
  Budget --* BudgetCreateView : model
  Budget --* BudgetDeleteView : model
  Budget --* BudgetListView : model
  Budget --* BudgetUpdateView : model
  BudgetConfiguration --* Meta : model
  BudgetConfiguration --* BudgetConfigurationCreateView : model
  BudgetConfiguration --* BudgetConfigurationDeleteView : model
  BudgetConfiguration --* BudgetConfigurationListView : model
  BudgetConfiguration --* BudgetConfigurationUpdateView : model
  Category --* Meta : model
  Category --* Meta : model
  Category --* CategoryCreateView : model
  Category --* CategoryDeleteView : model
  Category --* CategoryListView : model
  Category --* CategoryUpdateView : model
  Chart --* Meta : model
  Goal --* Meta : model
  Goal --* GoalCreateView : model
  Goal --* GoalDeleteView : model
  Goal --* GoalListView : model
  Goal --* GoalUpdateView : model
  Group --* Meta : model
  Group --* GroupCreateView : model
  Group --* GroupDeleteView : model
  Group --* GroupListView : model
  Group --* GroupUpdateView : model
  Icon --* Meta : model
  Icon --* Meta : model
  Icon --* IconCreateView : model
  Icon --* IconDeleteView : model
  Icon --* IconListView : model
  Icon --* IconUpdateView : model
  Installment --* Meta : model
  Installment --* Meta : model
  Installment --* InstallmentCreateView : model
  Installment --* InstallmentDeleteView : model
  Installment --* InstallmentListView : model
  Installment --* InstallmentUpdateView : model
  RecurrentTransaction --* Meta : model
  RecurrentTransaction --* Meta : model
  RecurrentTransaction --* RecurrentTransactionCreateView : model
  RecurrentTransaction --* RecurrentTransactionDeleteView : model
  RecurrentTransaction --* RecurrentTransactionListView : model
  RecurrentTransaction --* RecurrentTransactionUpdateView : model
  Transaction --* Meta : model
  Transaction --* Meta : model
  Transaction --* TransactionDeleteView : model
  Transaction --* TransactionListView : model
  Transaction --* TransactionUpdateView : model
  Transference --* Meta : model
  AccountSerializer --* InstallmentSerializer : account
  AccountSerializer --* RecurrentTransactionSerializer : account
  AccountSerializer --* TransactionSerializer : account
  AccountSerializer --* TransferenceSerializer : from_account
  AccountSerializer --* TransferenceSerializer : to_account
  AccountSerializer --* AccountViewSet : serializer_class
  CategorySerializer --* InstallmentSerializer : category
  CategorySerializer --* RecurrentTransactionSerializer : category
  CategorySerializer --* TransactionSerializer : category
  CategorySerializer --* CategoryViewSet : serializer_class
  InstallmentSerializer --* InstallmentViewSet : serializer_class
  RecurrentTransactionSerializer --* RecurrentTransactionViewSet : serializer_class
  TransactionSerializer --* TransactionViewSet : serializer_class
  TransferenceSerializer --* TransferenceViewSet : serializer_class
  UserSerializer --* UserViewSet : serializer_class
